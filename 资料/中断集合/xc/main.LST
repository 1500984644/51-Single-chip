C51 COMPILER V9.00   MAIN                                                                  04/24/2017 20:40:28 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\KEIL\keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /**2016年5月24日**/
   2          /**孙宇博**/
   3          /**此程序用到了中断号0,1,2,3，**/
   4          /**当外部中断0处于低电平状态，定时器/计数器T0停止计时。高电频时恢复计时（采用按键方式来调整高低电平)**/
   5          /**当外部中断1处于低电平状态，定时器/计数器T1停止计时。高电频时恢复计时（采用按键方式来调整高低电平)**/
   6          /**当外部中断0按键按下时加一，当外部中断1按键按下时减一**/
   7          #include <reg51.h>
   8          unsigned char i,sec,sec1,cp2;
   9          unsigned int cp1,cp3; 
  10          
  11          unsigned char seven_seg[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
  12          
  13          //void delay(unsigned int x)
  14          //{while(x--);}
  15          
  16          void isr0() interrupt 0
  17          {
  18   1              i++;
  19   1              if(i>=99)
  20   1              i=99;
  21   1      }
  22          void isrT0() interrupt 1
  23          {
  24   1      //      TH0  = (65536 - 2000)/256; //T0 由外部中断0控制
  25   1      //      TL0  = (65536 - 2000)%256; //T0 由外部中断0控制
  26   1      
  27   1              TH0  = 0; //T0 由外部中断0控制
  28   1              TL0  = 0; //T0 由外部中断0控制
  29   1      
  30   1              cp1++;
  31   1              if(cp1>=50)
  32   1              {
  33   2                      sec ++;
  34   2                      if(sec==99)
  35   2                      sec=0;
  36   2                      cp1= 0; 
  37   2              }
  38   1      }
  39          
  40          void isr2() interrupt 2
  41          {
  42   1              i--;
  43   1              if(i<=0)
  44   1              i=0;
  45   1      }
  46          
  47          void isrT1() interrupt 3
  48          {
  49   1              TH1 = (65536 - 2000)/256; //T1 高位溢满计数 
  50   1              TL1 = (65536 - 2000)%256; //T1 高位溢满计数
  51   1              cp3++;
  52   1              if(cp3>=500)
  53   1              {
  54   2                      sec1 ++;
  55   2                      if(sec1==99)
C51 COMPILER V9.00   MAIN                                                                  04/24/2017 20:40:28 PAGE 2   

  56   2                      sec1=0;
  57   2                      cp3= 0; 
  58   2              }
  59   1      }
  60          
  61          
  62          
  63          void init0()
  64          {               
  65   1              TMOD = 0x99;
  66   1      //      TH0  = (65536 - 2000)/256; //T0 由外部中断0控制
  67   1      //      TL0  = (65536 - 2000)%256; //T0 由外部中断0控制
  68   1      
  69   1              TH0  = 0; //T0 由外部中断0控制
  70   1              TL0  = 0; //T0 由外部中断0控制
  71   1      
  72   1              TH1  = (65536 - 2000)/256; //T1 由外部中断1控制
  73   1              TL1  = (65536 - 2000)%256; //T1 由外部中断1控制
  74   1      
  75   1              EA   = 1;//cpu中断开放  但每个中断源的中断请求是允许还是禁止，还需要各自的控制位调整
  76   1      
  77   1              INT1 = 1;
  78   1              IT1  = 1;//外部中断1的触发控制位
  79   1              EX1  = 1;//外部中断1的中断控制位，允许外部中断1开放 P3^3
  80   1              TR1  = 1;//是T1的控制位
  81   1              ET1  = 1;//是计数器T1的溢出中断控制位
  82   1      
  83   1              INT0 = 1;
  84   1              IT0  = 1;//外部中断0的触发控制位
  85   1              EX0  = 1;//外部中断0的中断控制位，允许外部中断0开放 P3^2
  86   1              TR0  = 1;//是T0的控制位
  87   1              ET0  = 1;//是计数器T0的溢出中断控制位
  88   1      }
  89          
  90          void display()
  91          {
  92   1              P0 = 0xff;
  93   1              switch (cp2)
  94   1              {
  95   2                      case 0:P2=~0x01;P0 = seven_seg[i%10];break;
  96   2                      case 1:P2=~0x02;P0 = seven_seg[i/10];break;
  97   2                      case 2:P2=~0x04;P0 = seven_seg[sec1%10];break;
  98   2                      case 3:P2=~0x08;P0 = seven_seg[sec1/10];break;
  99   2                      case 4:P2=~0x10;P0 = seven_seg[sec%10];break;
 100   2                      case 5:P2=~0x20;P0 = seven_seg[sec/10];break;
 101   2                      
 102   2              }
 103   1              cp2++;
 104   1              if(cp2>=6)cp2=0;
 105   1      }
 106          
 107          void main()
 108          {
 109   1              init0();
 110   1      
 111   1              while(1)
 112   1              {
 113   2                      display();
 114   2              }               
 115   1      }
 116          
 117          
C51 COMPILER V9.00   MAIN                                                                  04/24/2017 20:40:28 PAGE 3   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    278    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
